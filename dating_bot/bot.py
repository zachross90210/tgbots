from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

import os
from dotenv import load_dotenv
load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
DATING_URL = os.getenv("DATING_URL")

LANGUAGE, QUIZ = range(2)

LANGUAGES = {
    "üá∫üá∏ English": "en",
    "üá∑üá∫ –†—É—Å—Å–∫–∏–π": "ru",
    "üá´üá∑ Fran√ßais": "fr"
}

TRANSLATIONS = {
    "en": {
        "welcome": "üåç Welcome! Wanna meet someone new? Just a few quick taps‚Ä¶",
        "questions": [
            ("1. What are you looking for?", [["Casual fun", "Long-term"], ["Just chatting", "Not sure"]]),
            ("2. What excites you most?", [["Flirty talk", "Chemistry"], ["Deep connection", "All of it"]]),
            ("3. How soon to meet?", [["Tonight", "This week"], ["Let's chat", "No rush"]]),
        ],
        "result": "Great! Register now. You'll get an email. Then access the site with women üëâ <a href='{}'>CLICK HERE</a>",
        "cancel": "Cancelled.",
    },
    "ru": {
        "welcome": "üåç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –•–æ—Ç–∏—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è? –ü–∞—Ä–∞ –±—ã—Å—Ç—Ä—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤‚Ä¶",
        "questions": [
            ("1. –ß—Ç–æ –≤—ã –∏—â–µ—Ç–µ?", [["–§–ª–∏—Ä—Ç", "–°–µ—Ä—å—ë–∑–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è"], ["–ü—Ä–æ—Å—Ç–æ –æ–±—â–µ–Ω–∏–µ", "–ù–µ —É–≤–µ—Ä–µ–Ω"]]),
            ("2. –ß—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∑–∞–≤–æ–¥–∏—Ç?", [["–§–ª–∏—Ä—Ç", "–•–∏–º–∏—è"], ["–ì–ª—É–±–æ–∫–∞—è —Å–≤—è–∑—å", "–í—Å—ë —Å—Ä–∞–∑—É"]]),
            ("3. –ö–æ–≥–¥–∞ —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è?", [["–°–µ–≥–æ–¥–Ω—è", "–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ"], ["–°–Ω–∞—á–∞–ª–∞ –ø–æ–æ–±—â–∞–µ–º—Å—è", "–ù–µ —Å–ø–µ—à—É"]]),
        ],
        "result": "–ò–¥–µ–∞–ª—å–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è. –¢–µ–±–µ –Ω–∞ –ø–æ—á—Ç—É –ø—Ä–∏–¥–µ—Ç –ø–∏—Å—å–º–æ. –ó–∞—Ç–µ–º —Ç—ã –ø–æ–ª—É—á–∏—à—å –¥–æ—Å—Ç—É–ø –∫ —Å–∞–π—Ç—É —Å –∂–µ–Ω—â–∏–Ω–∞–º–∏ üëâ  <a href='{}'>–ñ–ú–ò –°–Æ–î–ê</a>",
        "cancel": "–û—Ç–º–µ–Ω–µ–Ω–æ.",
    },
    "fr": {
        "welcome": "üåç Bienvenue ! Pr√™t √† rencontrer quelqu‚Äôun ? Quelques clics suffisent‚Ä¶",
        "questions": [
            ("1. Que recherchez-vous ?", [["Aventure", "Relation s√©rieuse"], ["Discuter", "Je ne sais pas"]]),
            ("2. Qu‚Äôest-ce qui vous excite le plus ?", [["S√©duction", "Alchimie"], ["Connexion profonde", "Tout √ßa"]]),
            ("3. Quand se rencontrer ?", [["Ce soir", "Cette semaine"], ["D‚Äôabord discuter", "Pas press√©"]]),
        ],
        "result": "Parfait ! Inscris-toi. Tu recevras un email. Puis tu acc√®deras au site avec des femmes üëâ <a href='{}'>Cliquez ici</a>",
        "cancel": "Annul√©.",
    }
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [[k] for k in LANGUAGES]
    await update.message.reply_text(
        "Choose your language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choisissez la langue:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return LANGUAGE

async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    lang_key = update.message.text.strip()
    if lang_key not in LANGUAGES:
        await update.message.reply_text("Please choose from the options.")
        return LANGUAGE
    lang = LANGUAGES[lang_key]
    context.user_data['lang'] = lang
    context.user_data['answers'] = []
    await update.message.reply_text(
        TRANSLATIONS[lang]["welcome"],
        reply_markup=ReplyKeyboardRemove()
    )
    return await send_question(update, context, 0)

async def send_question(update, context, index):
    lang = context.user_data['lang']
    q_text, options = TRANSLATIONS[lang]["questions"][index]
    markup = ReplyKeyboardMarkup(options, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(q_text, reply_markup=markup)
    return QUIZ

async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['answers'].append(update.message.text.strip())
    current = len(context.user_data['answers'])
    if current < 3:
        return await send_question(update, context, current)
    else:
        lang = context.user_data['lang']
        await update.message.reply_text(
            TRANSLATIONS[lang]["result"].format(DATING_URL),
            reply_markup=ReplyKeyboardRemove(),
            disable_web_page_preview=True,
            parse_mode="HTML"
        )
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    lang = context.user_data.get('lang', 'en')
    await update.message.reply_text(TRANSLATIONS[lang]["cancel"], reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            LANGUAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_language)],
            QUIZ: [MessageHandler(filters.TEXT & ~filters.COMMAND, quiz)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv)
    app.run_polling()

if __name__ == "__main__":
    main()
