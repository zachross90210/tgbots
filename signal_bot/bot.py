import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ConversationHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
from dotenv import load_dotenv

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()

if not os.getenv("TELEGRAM_BOT_TOKEN"):
    raise ValueError("No TELEGRAM_BOT_TOKEN found in .env file. Please add your bot token.")

# Conversation states
LANGUAGE, SUBSCRIBE, START_GAME, REGISTRATION, ID_CHECK = range(5)

# Channel link
CHANNEL_LINK = "https://t.me/+b4wB-amqey4zYTMy"  # Replace with actual channel link
REGISTRATION_LINK = "https://3rjue.bemobtrk.com/go/f2eab0c2-6178-410b-9713-fc218e06afdf?"
SIGNALBOT_LINK = "https://grizliq.github.io/gemblbot.main/"
# Language translations

OFFER_LINKS = """
    <a href="https://3rjue.bemobtrk.com/go/f2eab0c2-6178-410b-9713-fc218e06afdf">LINK1</a>\n
    <a href="https://3rjue.bemobtrk.com/go/86677532-151d-44da-9ed3-71823c1bac96">LINK2</a>\n
    <a href="https://3rjue.bemobtrk.com/go/bc4e707a-b8ae-44c4-8b86-aaf2fae51fdd">LINK3</a>\n
""";

TRANSLATIONS = {
    "ru": {
        "welcome": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, üöÄ SIGNAL BOT!",
        "subscribe_text": "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ - –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ªü§ù",
        "subscribe_channel": "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
        "already_subscribed": "–Ø —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω",
        "welcome_team": (
            "üß© –ö–æ–º–∞–Ω–¥–∞ W —Ä–∞–¥–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è –≤ —Å–≤–æ–∏—Ö —Ä—è–¥–∞—Ö!\n\n"
            "üî• –õ–£–ß–®–ò–ô –ë–û–¢! ‚úÖ –ø—Ä–æ–≤–æ–¥–∏—Ç –ø–æ–ª–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –≤–∞—à–µ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏, "
            "–ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–π—Ç–∏ –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥ —Å –∫–∞–∑–∏–Ω–æ!\n\n"
            "üí∂ –ü—Ä–æ–µ–∫—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ Open AI"
        ),
        "how_to_start": "–ö–∞–∫ –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å?",
        "bot_info": (
            "ü§ñ–ë–æ—Ç –æ—Å–Ω–æ–≤–∞–Ω –∏ –æ–±—É—á–µ–Ω –Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä–Ω–æ–π –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ OpenAI!\n\n"
            "‚öúÔ∏è–î–ª—è –æ–±—É—á–µ–Ω–∏—è –±–æ—Ç–∞ –±—ã–ª–æ —Å—ã–≥—Ä–∞–Ω–æ üé∞30,000 –∏–≥—Ä.\n\n"
            "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç 15-25% –æ—Ç —Å–≤–æ–µ–≥–æ üí∏ –∫–∞–ø–∏—Ç–∞–ª–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ!\n\n"
            "–ë–æ—Ç –≤—Å–µ –µ—â–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è! –¢–æ—á–Ω–æ—Å—Ç—å –±–æ—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 92%!\n\n"
            "–ß—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏, —Å–ª–µ–¥—É–π—Ç–µ —ç—Ç–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n\n"
            "üü¢ 1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –≤ –∫–∞–∑–∏–Ω–æ 1WIN –ø–æ –æ–¥–Ω–æ–π –∏–∑ —Å—Å—ã–ª–æ–∫ –Ω–∏–∂–µ:\n\n"
            f"üëâ {OFFER_LINKS}"
            "[–ï—Å–ª–∏ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å VPN (–®–≤–µ—Ü–∏—è). –í Play Market/App Store –µ—Å—Ç—å –º–Ω–æ–≥–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤, "
            "–Ω–∞–ø—Ä–∏–º–µ—Ä: Vpnify, Planet VPN, Hotspot VPN –∏ —Ç.–¥.!]\n\n"
            "‚ùóÔ∏è–ë–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø –∫ —Å–∏–≥–Ω–∞–ª–∞–º –Ω–µ –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç‚ùóÔ∏è\n\n"
            "üü¢ 2. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —Å–≤–æ–µ–≥–æ —Å—á–µ—Ç–∞.\n"
            "üü¢ 3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª –∏–≥—Ä 1win –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É.\n"
            "üü¢ 4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≤—É—à–µ–∫ –Ω–∞ —Ç—Ä–∏. –≠—Ç–æ –≤–∞–∂–Ω–æ!\n"
            "üü¢ 5. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ —Å–∏–≥–Ω–∞–ª —É –±–æ—Ç–∞ –∏ —Å—Ç–∞–≤—å—Ç–µ —Å—Ç–∞–≤–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ –æ—Ç –±–æ—Ç–∞.\n"
            "üü¢ 6. –í —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É–¥–≤–æ–∏—Ç—å (x¬≤) –≤–∞—à—É —Å—Ç–∞–≤–∫—É, —á—Ç–æ–±—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–∫—Ä—ã—Ç—å —É–±—ã—Ç–æ–∫ —Å –ø–æ–º–æ—â—å—é —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞."
        ),
        "next": "–î–∞–ª—å—à–µ",
        "registration_info": (
            "üåê –®–∞–≥ 2 - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è.\n\n"
            "‚ú¶ –î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –Ω–∞—à–∏–º –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ù–û–í–´–ô –∞–∫–∫–∞—É–Ω—Ç. "
            "–í–æ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥ - DOTHEDEP (–∏–Ω–∞—á–µ –±–æ—Ç –Ω–µ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç ‚ùóÔ∏è)\n\n"
            "‚ú¶ –ï—Å–ª–∏ –í—ã –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ø–∞–¥–∞–µ—Ç–µ –Ω–∞ —Å—Ç–∞—Ä—ã–π –∞–∫–∫–∞—É–Ω—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–π—Ç–∏ —Å –Ω–µ–≥–æ –∏ –∑–∞–Ω–æ–≤–æ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!"
        ),
        "register": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
        "registered": "–Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è",
        "id_check": (
            "üåê –®–ê–ì 3 - –ü—Ä–æ–π–¥–∏ –ø—Ä–æ–≤–µ—Ä–∫—É\n\n"
            "–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º –≤–∞—à ID.\n\n"
            "–ì–î–ï –í–ó–Ø–¢–¨ ID‚ÅâÔ∏è\n\n"
            "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü–æ–ø–æ–ª–Ω–∏—Ç—å\"\n"
            "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à ID, –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–ø—Ä–∞–≤–∞ —Å–≤–µ—Ä—Ö—É –≤ –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –æ–∫–Ω–µ\n"
            "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º‚úÖ\n\n"
            "‚ÄºÔ∏è–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é‚ÄºÔ∏è"
        ),
        "instruction": "üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
        "back_to_id": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ ID"
    },
    "en": {
        "welcome": "Welcome to üöÄ SIGNAL BOT!",
        "subscribe_text": "To use the bot - subscribe to our channelü§ù",
        "subscribe_channel": "Subscribe to channel",
        "already_subscribed": "I'm already subscribed",
        "welcome_team": (
            "üß© Team W is glad to welcome you to our ranks!\n\n"
            "üî• BEST BOT! ‚úÖ conducts a complete analysis of your gaming account with signals, "
            "with which you can achieve stable income from the casino!\n\n"
            "üí∂ The project is based on Artificial Intelligence Open AI"
        ),
        "how_to_start": "How to start playing?",
        "bot_info": (
            "ü§ñBot is based and trained on OpenAI cluster neural network!\n\n"
            "‚öúÔ∏èTo train the bot, üé∞30,000 games were played.\n\n"
            "Currently, bot users successfully generate 15-25% of their üí∏ capital daily!\n\n"
            "The bot is still undergoing checks and corrections! Bot accuracy is 92%!\n\n"
            "To achieve maximum profit, follow this instruction:\n\n"
            "üü¢ 1. Register at 1WIN casino by one of the links below:\n\n"
            f"üëâ {OFFER_LINKS}"
            "[If it doesn't open, use VPN (Sweden). Play Market/App Store has many free services, "
            "for example: Vpnify, Planet VPN, Hotspot VPN, etc.!]\n\n"
            "‚ùóÔ∏èWithout registration and promo code, access to signals will not be opened‚ùóÔ∏è\n\n"
            "üü¢ 2. Top up your account balance.\n"
            "üü¢ 3. Go to 1win games section and select a game.\n"
            "üü¢ 4. Set the number of mines to three. This is important!\n"
            "üü¢ 5. Request a signal from the bot and place bets according to the signals from the bot.\n"
            "üü¢ 6. In case of an unsuccessful signal, we recommend doubling (x¬≤) your bet to fully cover the loss with the next signal."
        ),
        "next": "Next",
        "registration_info": (
            "üåê Step 2 - Register.\n\n"
            "‚ú¶ To synchronize with our bot, you need to register a NEW account. "
            "During registration, you must enter the promo code - DOTHEDEP (otherwise the bot won't work ‚ùóÔ∏è)\n\n"
            "‚ú¶ If you click the link and get to an old account, you need to log out and click the registration link again!"
        ),
        "register": "Registration",
        "registered": "I registered",
        "id_check": (
            "üåê STEP 3 - Pass verification\n\n"
            "After registration, to receive signals you need to send your ID to the bot chat.\n\n"
            "WHERE TO GET ID‚ÅâÔ∏è\n\n"
            "1. Click the \"Top up\" button\n"
            "2. Copy your ID, it's located on the top right in the opened window\n"
            "3. Send it to the bot chat‚úÖ\n\n"
            "‚ÄºÔ∏èBe sure to read the instruction‚ÄºÔ∏è"
        ),
        "instruction": "üìã Instruction",
        "back_to_id": "‚¨ÖÔ∏è Back to ID verification"
    },
    "es": {
        "welcome": "¬°Bienvenido a üöÄ SIGNAL BOT!",
        "subscribe_text": "Para usar el bot - suscr√≠bete a nuestro canalü§ù",
        "subscribe_channel": "Suscribirse al canal",
        "already_subscribed": "Ya estoy suscrito",
        "welcome_team": (
            "üß© ¬°El equipo W se alegra de darte la bienvenida a nuestras filas!\n\n"
            "üî• ¬°MEJOR BOT! ‚úÖ realiza un an√°lisis completo de tu cuenta de juego con se√±ales, "
            "con las que puedes lograr ingresos estables del casino!\n\n"
            "üí∂ El proyecto est√° basado en Inteligencia Artificial Open AI"
        ),
        "how_to_start": "¬øC√≥mo empezar a jugar?",
        "bot_info": (
            "ü§ñ¬°El bot est√° basado y entrenado en la red neuronal de cl√∫ster OpenAI!\n\n"
            "‚öúÔ∏èPara entrenar el bot, se jugaron üé∞30,000 juegos.\n\n"
            "¬°Actualmente, los usuarios del bot generan exitosamente 15-25% de su üí∏ capital diariamente!\n\n"
            "¬°El bot a√∫n est√° pasando por verificaciones y correcciones! ¬°La precisi√≥n del bot es del 92%!\n\n"
            "Para lograr la m√°xima ganancia, sigue esta instrucci√≥n:\n\n"
            "üü¢ 1. Reg√≠strate en la casa de casino 1WIN por una de las siguientes:\n\n"
            f"üëâ {OFFER_LINKS}"
            "[Si no abre, usa VPN (Suecia). Play Market/App Store tiene muchos servicios gratuitos, "
            "por ejemplo: Vpnify, Planet VPN, Hotspot VPN, ¬°etc.!]\n\n"
            "‚ùóÔ∏èSin registro y c√≥digo promocional, no se abrir√° el acceso a las se√±ales‚ùóÔ∏è\n\n"
            "üü¢ 2. Recarga el saldo de tu cuenta.\n"
            "üü¢ 3. Ve a la secci√≥n de juegos de 1win y selecciona un juego.\n"
            "üü¢ 4. Establece el n√∫mero de minas en tres. ¬°Esto es importante!\n"
            "üü¢ 5. Solicita una se√±al del bot y haz apuestas seg√∫n las se√±ales del bot.\n"
            "üü¢ 6. En caso de una se√±al fallida, recomendamos doblar (x¬≤) tu apuesta para cubrir completamente la p√©rdida con la siguiente se√±al."
        ),
        "next": "Siguiente",
        "registration_info": (
            "üåê Paso 2 - Reg√≠strate.\n\n"
            "‚ú¶ Para sincronizar con nuestro bot, necesitas registrar una cuenta NUEVA. "
            "Durante el registro, debes ingresar el c√≥digo promocional - DOTHEDEP (¬°de lo contrario el bot no funcionar√° ‚ùóÔ∏è)\n\n"
            "‚ú¶ ¬°Si haces clic en el enlace y llegas a una cuenta antigua, necesitas cerrar sesi√≥n y hacer clic en el enlace de registro nuevamente!"
        ),
        "register": "Registro",
        "registered": "Me registr√©",
        "id_check": (
            "üåê PASO 3 - Pasa la verificaci√≥n\n\n"
            "Despu√©s del registro, para recibir se√±ales necesitas enviar tu ID al chat del bot.\n\n"
            "¬øD√ìNDE OBTENER EL ID‚ÅâÔ∏è\n\n"
            "1. Haz clic en el bot√≥n \"Recargar\"\n"
            "2. Copia tu ID, est√° ubicado en la parte superior derecha en la ventana abierta\n"
            "3. Env√≠alo al chat del bot‚úÖ\n\n"
            "‚ÄºÔ∏èAseg√∫rate de leer la instrucci√≥n‚ÄºÔ∏è"
        ),
        "instruction": "üìã Instrucci√≥n",
        "back_to_id": "‚¨ÖÔ∏è Volver a verificaci√≥n de ID"
    },
    "pt": {
        "welcome": "Bem-vindo ao üöÄ SIGNAL BOT!",
        "subscribe_text": "Para usar o bot - inscreva-se no nosso canalü§ù",
        "subscribe_channel": "Inscrever-se no canal",
        "already_subscribed": "J√° estou inscrito",
        "welcome_team": (
            "üß© A equipe W est√° feliz em dar-lhe as boas-vindas √†s nossas fileiras!\n\n"
            "üî• MELHOR BOT! ‚úÖ conduz uma an√°lise completa da sua conta de jogo com sinais, "
            "com os quais voc√™ pode alcan√ßar renda est√°vel do cassino!\n\n"
            "üí∂ O projeto √© baseado em Intelig√™ncia Artificial Open AI"
        ),
        "how_to_start": "Como come√ßar a jogar?",
        "bot_info": (
            "ü§ñBot √© baseado e treinado na rede neural de cluster OpenAI!\n\n"
            "‚öúÔ∏èPara treinar o bot, üé∞30.000 jogos foram jogados.\n\n"
            "Atualmente, os usu√°rios do bot geram com sucesso 15-25% do seu üí∏ capital diariamente!\n\n"
            "O bot ainda est√° passando por verifica√ß√µes e corre√ß√µes! A precis√£o do bot √© de 92%!\n\n"
            "Para alcan√ßar o lucro m√°ximo, siga esta instru√ß√£o:\n\n"
            "üü¢ 1. Registre-se na casa de casino 1WIN por uma de las siguientes:\n\n"
            f"üëâ {OFFER_LINKS}"
            "[Se n√£o abrir, use VPN (Su√©cia). Play Market/App Store tem muitos servi√ßos gratuitos, "
            "por exemplo: Vpnify, Planet VPN, Hotspot VPN, etc.!]\n\n"
            "‚ùóÔ∏èSem registro e c√≥digo promocional, o acesso aos sinais n√£o ser√° aberto‚ùóÔ∏è\n\n"
            "üü¢ 2. Recarregue o saldo da sua conta.\n"
            "üü¢ 3. V√° para a se√ß√£o de jogos do 1win e selecione um jogo.\n"
            "üü¢ 4. Defina o n√∫mero de minas para tr√™s. Isso √© importante!\n"
            "üü¢ 5. Solicite um sinal do bot e fa√ßa apostas de acordo com os sinais do bot.\n"
            "üü¢ 6. Em caso de sinal mal-sucedido, recomendamos dobrar (x¬≤) sua aposta para cobrir completamente a perda com o pr√≥ximo sinal."
        ),
        "next": "Pr√≥ximo",
        "registration_info": (
            "üåê Passo 2 - Registre-se.\n\n"
            "‚ú¶ Para sincronizar com nosso bot, voc√™ precisa registrar uma conta NOVA. "
            "Durante o registro, voc√™ deve inserir o c√≥digo promocional - DOTHEDEP (caso contr√°rio o bot n√£o funcionar√° ‚ùóÔ∏è)\n\n"
            "‚ú¶ Se voc√™ clicar no link e chegar a uma conta antiga, precisa sair e clicar no link de registro novamente!"
        ),
        "register": "Registro",
        "registered": "Eu me registrei",
        "id_check": (
            "üåê PASSO 3 - Passe pela verifica√ß√£o\n\n"
            "Ap√≥s o registro, para receber sinais voc√™ precisa enviar seu ID para o chat do bot.\n\n"
            "ONDE OBTER O ID‚ÅâÔ∏è\n\n"
            "1. Clique no bot√£o \"Recarregar\"\n"
            "2. Copie seu ID, ele est√° localizado no canto superior direito na janela aberta\n"
            "3. Envie-o para o chat do bot‚úÖ\n\n"
            "‚ÄºÔ∏èCertifique-se de ler a instru√ß√£o‚ÄºÔ∏è"
        ),
        "instruction": "üìã Instru√ß√£o",
        "back_to_id": "‚¨ÖÔ∏è Voltar √† verifica√ß√£o de ID"
    }
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Start conversation and ask for language."""
    keyboard = [
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="ru")],
        [InlineKeyboardButton("üá¨üáß English", callback_data="en")],
        [InlineKeyboardButton("üá™üá∏ Espa√±ol", callback_data="es")],
        [InlineKeyboardButton("üáßüá∑ Portugu√™s", callback_data="pt")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "Please select your language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Selecciona tu idioma / Selecione seu idioma:",
        reply_markup=reply_markup
    )
    return LANGUAGE

async def language_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle language selection."""
    query = update.callback_query
    await query.answer()
    
    language = query.data
    context.user_data['language'] = language
    
    keyboard = [
        [InlineKeyboardButton(TRANSLATIONS[language]["subscribe_channel"], url=CHANNEL_LINK)],
        [InlineKeyboardButton(TRANSLATIONS[language]["already_subscribed"], callback_data="subscribed")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"{TRANSLATIONS[language]['welcome']}\n\n{TRANSLATIONS[language]['subscribe_text']}",
        reply_markup=reply_markup
    )
    return SUBSCRIBE

async def check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle subscription confirmation."""
    query = update.callback_query
    await query.answer()
    
    language = context.user_data['language']
    keyboard = [[InlineKeyboardButton(TRANSLATIONS[language]["how_to_start"], callback_data="how_to_start")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(TRANSLATIONS[language]["welcome_team"], reply_markup=reply_markup)
    return START_GAME

async def handle_game_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle game start button press."""
    query = update.callback_query
    await query.answer()
    
    language = context.user_data['language']
    keyboard = [[InlineKeyboardButton(TRANSLATIONS[language]["next"], callback_data="next")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(TRANSLATIONS[language]["bot_info"], reply_markup=reply_markup, parse_mode="HTML", disable_web_page_preview=True)
    return REGISTRATION

async def handle_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle registration step."""
    query = update.callback_query
    await query.answer()
    
    language = context.user_data['language']
    keyboard = [
        [InlineKeyboardButton(TRANSLATIONS[language]["register"], url=REGISTRATION_LINK)],
        [InlineKeyboardButton(TRANSLATIONS[language]["registered"], callback_data="registered")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(TRANSLATIONS[language]["registration_info"], reply_markup=reply_markup)
    return ID_CHECK

async def handle_registered(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle when user confirms registration."""
    query = update.callback_query
    await query.answer()
    
    language = context.user_data['language']
    keyboard = [[InlineKeyboardButton(TRANSLATIONS[language]["instruction"], callback_data="show_instruction")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(TRANSLATIONS[language]["id_check"], reply_markup=reply_markup)
    return ID_CHECK

async def show_instruction(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Show bot instruction (bot_info content)."""
    query = update.callback_query
    await query.answer()
    
    language = context.user_data['language']
    keyboard = [[InlineKeyboardButton(TRANSLATIONS[language]["back_to_id"], callback_data="back_to_id")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(TRANSLATIONS[language]["bot_info"], reply_markup=reply_markup, parse_mode="HTML", disable_web_page_preview=True)
    return ID_CHECK

async def back_to_id_check(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Return back to ID check step."""
    query = update.callback_query
    await query.answer()
    
    language = context.user_data['language']
    keyboard = [[InlineKeyboardButton(TRANSLATIONS[language]["instruction"], callback_data="show_instruction")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    REGISTRATION_LINK
    await query.edit_message_text(TRANSLATIONS[language]["id_check"], reply_markup=reply_markup)
    return ID_CHECK

async def handle_id_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle ID input from user."""
    language = context.user_data.get('language', 'ru')
    keyboard = [[InlineKeyboardButton("üîó Link", url=SIGNALBOT_LINK)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("Open signal bot:", reply_markup=reply_markup)
    return ConversationHandler.END

def main() -> None:
    """Start the bot."""
    try:
        application = (
            Application.builder()
            .token(os.getenv("TELEGRAM_BOT_TOKEN"))
            .build()
        )

        conv_handler = ConversationHandler(
            entry_points=[CommandHandler("start", start)],
            states={
                LANGUAGE: [CallbackQueryHandler(language_selected)],
                SUBSCRIBE: [CallbackQueryHandler(check_subscription)],
                START_GAME: [CallbackQueryHandler(handle_game_start)],
                REGISTRATION: [CallbackQueryHandler(handle_registration, pattern="^next$")],
                ID_CHECK: [
                    CallbackQueryHandler(handle_registered, pattern="^registered$"),
                    CallbackQueryHandler(show_instruction, pattern="^show_instruction$"),
                    CallbackQueryHandler(back_to_id_check, pattern="^back_to_id$"),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_id_input)
                ]
            },
            fallbacks=[CommandHandler("start", start)]
        )

        application.add_handler(conv_handler)
        logger.info("Bot started successfully!")
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except Exception as e:
        logger.error(f"Error starting bot: {e}")

if __name__ == '__main__':
    main()
